

  partial
    1) caches the initially supplied arguments
    2) correctly reports the arity of the new function


  0 passing (63ms)
  2 failing

  1) partial
       caches the initially supplied arguments:

      AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:
+ actual - expected

+ '(...rest) => {\n' +
+   '    if (args.length + rest.length >= len) {\n' +
+   '      return fn(...args, ...rest);\n' +
+   '    }\n' +
+   '\n' +
+   '    return partial(fn, ...[...args, ...rest]);\n' +
+   '  }'
- '1'
      + expected - actual

      -(...rest) => {
      -    if (args.length + rest.length >= len) {
      -      return fn(...args, ...rest);
      -    }
      -
      -    return partial(fn, ...[...args, ...rest]);
      -  }
      +1
      
      at strictEqual (test/shared/eq.js:8:10)
      at Context.eq (test/partial.js:14:5)
      at processImmediate (internal/timers.js:439:21)

  2) partial
       correctly reports the arity of the new function:

      AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:

'0' !== '2'

      + expected - actual

      -0
      +2
      
      at strictEqual (test/shared/eq.js:8:10)
      at Context.eq (test/partial.js:19:5)
      at processImmediate (internal/timers.js:439:21)



