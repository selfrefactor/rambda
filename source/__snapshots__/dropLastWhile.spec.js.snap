// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`brute force Array | Array 1`] = `
{
  "error": {
    "message": "'predicate' is from wrong type object",
    "type": "Error",
  },
  "inputs": [
    [],
    [
      1,
      2,
      3,
      4,
      5,
    ],
  ],
  "label": "errors types are different",
  "ok": false,
  "ramdaError": {
    "message": "pred is not a function",
    "type": "TypeError",
  },
  "ramdaResult": "PENDING",
  "result": "PENDING",
}
`;

exports[`brute force Array | Array 2`] = `
{
  "error": {
    "message": "'predicate' is from wrong type object",
    "type": "Error",
  },
  "inputs": [
    [
      1,
    ],
    [
      1,
      2,
      3,
      4,
      5,
    ],
  ],
  "label": "errors types are different",
  "ok": false,
  "ramdaError": {
    "message": "pred is not a function",
    "type": "TypeError",
  },
  "ramdaResult": "PENDING",
  "result": "PENDING",
}
`;

exports[`brute force Array | Array 3`] = `
{
  "error": {
    "message": "'predicate' is from wrong type object",
    "type": "Error",
  },
  "inputs": [
    [],
    [
      {},
      "1",
      2,
    ],
  ],
  "label": "errors types are different",
  "ok": false,
  "ramdaError": {
    "message": "pred is not a function",
    "type": "TypeError",
  },
  "ramdaResult": "PENDING",
  "result": "PENDING",
}
`;

exports[`brute force Array | Array 4`] = `
{
  "error": {
    "message": "'predicate' is from wrong type object",
    "type": "Error",
  },
  "inputs": [
    [
      1,
    ],
    [
      {},
      "1",
      2,
    ],
  ],
  "label": "errors types are different",
  "ok": false,
  "ramdaError": {
    "message": "pred is not a function",
    "type": "TypeError",
  },
  "ramdaResult": "PENDING",
  "result": "PENDING",
}
`;

exports[`brute force Array | Number 1`] = `
{
  "error": {
    "message": "'predicate' is from wrong type object",
    "type": "Error",
  },
  "inputs": [
    [],
    2,
  ],
  "label": "Rambda should not throw",
  "ok": false,
  "ramdaError": "PENDING",
  "ramdaResult": [],
  "result": "PENDING",
}
`;

exports[`brute force Array | Number 2`] = `
{
  "error": {
    "message": "'predicate' is from wrong type object",
    "type": "Error",
  },
  "inputs": [
    [
      1,
    ],
    2,
  ],
  "label": "Rambda should not throw",
  "ok": false,
  "ramdaError": "PENDING",
  "ramdaResult": [],
  "result": "PENDING",
}
`;

exports[`brute force Array | Promise 1`] = `
{
  "error": {
    "message": "'predicate' is from wrong type object",
    "type": "Error",
  },
  "inputs": [
    [],
    Promise {},
  ],
  "label": "Rambda should not throw",
  "ok": false,
  "ramdaError": "PENDING",
  "ramdaResult": [],
  "result": "PENDING",
}
`;

exports[`brute force Array | Promise 2`] = `
{
  "error": {
    "message": "'predicate' is from wrong type object",
    "type": "Error",
  },
  "inputs": [
    [
      1,
    ],
    Promise {},
  ],
  "label": "Rambda should not throw",
  "ok": false,
  "ramdaError": "PENDING",
  "ramdaResult": [],
  "result": "PENDING",
}
`;

exports[`brute force Array | RegExp 1`] = `
{
  "error": {
    "message": "'predicate' is from wrong type object",
    "type": "Error",
  },
  "inputs": [
    [],
    /foo/g,
  ],
  "label": "Rambda should not throw",
  "ok": false,
  "ramdaError": "PENDING",
  "ramdaResult": [],
  "result": "PENDING",
}
`;

exports[`brute force Array | RegExp 2`] = `
{
  "error": {
    "message": "'predicate' is from wrong type object",
    "type": "Error",
  },
  "inputs": [
    [
      1,
    ],
    /foo/g,
  ],
  "label": "Rambda should not throw",
  "ok": false,
  "ramdaError": "PENDING",
  "ramdaResult": [],
  "result": "PENDING",
}
`;

exports[`brute force Array | String 1`] = `
{
  "error": {
    "message": "'predicate' is from wrong type object",
    "type": "Error",
  },
  "inputs": [
    [],
    "foobar",
  ],
  "label": "errors types are different",
  "ok": false,
  "ramdaError": {
    "message": "pred is not a function",
    "type": "TypeError",
  },
  "ramdaResult": "PENDING",
  "result": "PENDING",
}
`;

exports[`brute force Array | String 2`] = `
{
  "error": {
    "message": "'predicate' is from wrong type object",
    "type": "Error",
  },
  "inputs": [
    [
      1,
    ],
    "foobar",
  ],
  "label": "errors types are different",
  "ok": false,
  "ramdaError": {
    "message": "pred is not a function",
    "type": "TypeError",
  },
  "ramdaResult": "PENDING",
  "result": "PENDING",
}
`;

exports[`brute force Array | String 3`] = `
{
  "error": {
    "message": "'predicate' is from wrong type object",
    "type": "Error",
  },
  "inputs": [
    [],
    "foobarfoobar",
  ],
  "label": "errors types are different",
  "ok": false,
  "ramdaError": {
    "message": "pred is not a function",
    "type": "TypeError",
  },
  "ramdaResult": "PENDING",
  "result": "PENDING",
}
`;

exports[`brute force Array | String 4`] = `
{
  "error": {
    "message": "'predicate' is from wrong type object",
    "type": "Error",
  },
  "inputs": [
    [
      1,
    ],
    "foobarfoobar",
  ],
  "label": "errors types are different",
  "ok": false,
  "ramdaError": {
    "message": "pred is not a function",
    "type": "TypeError",
  },
  "ramdaResult": "PENDING",
  "result": "PENDING",
}
`;

exports[`brute force Function | Number 1`] = `
{
  "error": {
    "message": "'iterable' is from wrong type number",
    "type": "Error",
  },
  "inputs": [
    [Function],
    2,
  ],
  "label": "Rambda should not throw",
  "ok": false,
  "ramdaError": "PENDING",
  "ramdaResult": [],
  "result": "PENDING",
}
`;

exports[`brute force Function | Number 2`] = `
{
  "error": {
    "message": "'iterable' is from wrong type number",
    "type": "Error",
  },
  "inputs": [
    [Function],
    2,
  ],
  "label": "Rambda should not throw",
  "ok": false,
  "ramdaError": "PENDING",
  "ramdaResult": [],
  "result": "PENDING",
}
`;

exports[`brute force Function | Number 3`] = `
{
  "error": {
    "message": "'iterable' is from wrong type number",
    "type": "Error",
  },
  "inputs": [
    [Function],
    2,
  ],
  "label": "Rambda should not throw",
  "ok": false,
  "ramdaError": "PENDING",
  "ramdaResult": [],
  "result": "PENDING",
}
`;

exports[`brute force Function | Number 4`] = `
{
  "error": {
    "message": "'iterable' is from wrong type number",
    "type": "Error",
  },
  "inputs": [
    [Function],
    2,
  ],
  "label": "Rambda should not throw",
  "ok": false,
  "ramdaError": "PENDING",
  "ramdaResult": [],
  "result": "PENDING",
}
`;

exports[`brute force Function | Promise 1`] = `
{
  "error": {
    "message": "'iterable' is from wrong type object",
    "type": "Error",
  },
  "inputs": [
    [Function],
    Promise {},
  ],
  "label": "Rambda should not throw",
  "ok": false,
  "ramdaError": "PENDING",
  "ramdaResult": [],
  "result": "PENDING",
}
`;

exports[`brute force Function | Promise 2`] = `
{
  "error": {
    "message": "'iterable' is from wrong type object",
    "type": "Error",
  },
  "inputs": [
    [Function],
    Promise {},
  ],
  "label": "Rambda should not throw",
  "ok": false,
  "ramdaError": "PENDING",
  "ramdaResult": [],
  "result": "PENDING",
}
`;

exports[`brute force Function | Promise 3`] = `
{
  "error": {
    "message": "'iterable' is from wrong type object",
    "type": "Error",
  },
  "inputs": [
    [Function],
    Promise {},
  ],
  "label": "Rambda should not throw",
  "ok": false,
  "ramdaError": "PENDING",
  "ramdaResult": [],
  "result": "PENDING",
}
`;

exports[`brute force Function | Promise 4`] = `
{
  "error": {
    "message": "'iterable' is from wrong type object",
    "type": "Error",
  },
  "inputs": [
    [Function],
    Promise {},
  ],
  "label": "Rambda should not throw",
  "ok": false,
  "ramdaError": "PENDING",
  "ramdaResult": [],
  "result": "PENDING",
}
`;

exports[`brute force Function | RegExp 1`] = `
{
  "error": {
    "message": "'iterable' is from wrong type object",
    "type": "Error",
  },
  "inputs": [
    [Function],
    /foo/g,
  ],
  "label": "Rambda should not throw",
  "ok": false,
  "ramdaError": "PENDING",
  "ramdaResult": [],
  "result": "PENDING",
}
`;

exports[`brute force Function | RegExp 2`] = `
{
  "error": {
    "message": "'iterable' is from wrong type object",
    "type": "Error",
  },
  "inputs": [
    [Function],
    /foo/g,
  ],
  "label": "Rambda should not throw",
  "ok": false,
  "ramdaError": "PENDING",
  "ramdaResult": [],
  "result": "PENDING",
}
`;

exports[`brute force Function | RegExp 3`] = `
{
  "error": {
    "message": "'iterable' is from wrong type object",
    "type": "Error",
  },
  "inputs": [
    [Function],
    /foo/g,
  ],
  "label": "Rambda should not throw",
  "ok": false,
  "ramdaError": "PENDING",
  "ramdaResult": [],
  "result": "PENDING",
}
`;

exports[`brute force Function | RegExp 4`] = `
{
  "error": {
    "message": "'iterable' is from wrong type object",
    "type": "Error",
  },
  "inputs": [
    [Function],
    /foo/g,
  ],
  "label": "Rambda should not throw",
  "ok": false,
  "ramdaError": "PENDING",
  "ramdaResult": [],
  "result": "PENDING",
}
`;

exports[`brute force String | Array 1`] = `
{
  "error": {
    "message": "'predicate' is from wrong type string",
    "type": "Error",
  },
  "inputs": [
    "",
    [
      1,
      2,
      3,
      4,
      5,
    ],
  ],
  "label": "errors types are different",
  "ok": false,
  "ramdaError": {
    "message": "pred is not a function",
    "type": "TypeError",
  },
  "ramdaResult": "PENDING",
  "result": "PENDING",
}
`;

exports[`brute force String | Array 2`] = `
{
  "error": {
    "message": "'predicate' is from wrong type string",
    "type": "Error",
  },
  "inputs": [
    "",
    [
      {},
      "1",
      2,
    ],
  ],
  "label": "errors types are different",
  "ok": false,
  "ramdaError": {
    "message": "pred is not a function",
    "type": "TypeError",
  },
  "ramdaResult": "PENDING",
  "result": "PENDING",
}
`;

exports[`brute force String | Number 1`] = `
{
  "error": {
    "message": "'predicate' is from wrong type string",
    "type": "Error",
  },
  "inputs": [
    "",
    2,
  ],
  "label": "Rambda should not throw",
  "ok": false,
  "ramdaError": "PENDING",
  "ramdaResult": [],
  "result": "PENDING",
}
`;

exports[`brute force String | Promise 1`] = `
{
  "error": {
    "message": "'predicate' is from wrong type string",
    "type": "Error",
  },
  "inputs": [
    "",
    Promise {},
  ],
  "label": "Rambda should not throw",
  "ok": false,
  "ramdaError": "PENDING",
  "ramdaResult": [],
  "result": "PENDING",
}
`;

exports[`brute force String | RegExp 1`] = `
{
  "error": {
    "message": "'predicate' is from wrong type string",
    "type": "Error",
  },
  "inputs": [
    "",
    /foo/g,
  ],
  "label": "Rambda should not throw",
  "ok": false,
  "ramdaError": "PENDING",
  "ramdaResult": [],
  "result": "PENDING",
}
`;

exports[`brute force String | String 1`] = `
{
  "error": {
    "message": "'predicate' is from wrong type string",
    "type": "Error",
  },
  "inputs": [
    "",
    "foobar",
  ],
  "label": "errors types are different",
  "ok": false,
  "ramdaError": {
    "message": "pred is not a function",
    "type": "TypeError",
  },
  "ramdaResult": "PENDING",
  "result": "PENDING",
}
`;

exports[`brute force String | String 2`] = `
{
  "error": {
    "message": "'predicate' is from wrong type string",
    "type": "Error",
  },
  "inputs": [
    "",
    "foobarfoobar",
  ],
  "label": "errors types are different",
  "ok": false,
  "ramdaError": {
    "message": "pred is not a function",
    "type": "TypeError",
  },
  "ramdaResult": "PENDING",
  "result": "PENDING",
}
`;
