// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`happy 1`] = `
"
# Rambda

Faster alternative to **Ramda** - [Documentation](https://selfrefactor.github.io/rambda/#/)

[![CircleCI](https://circleci.com/gh/selfrefactor/rambda/tree/master.svg?style=svg)](https://circleci.com/gh/selfrefactor/rambda/tree/master)
[![codecov](https://codecov.io/gh/selfrefactor/rambda/branch/master/graph/badge.svg)](https://codecov.io/gh/selfrefactor/rambda)
[![dependencies Status](https://david-dm.org/selfrefactor/rambda/status.svg)](https://david-dm.org/selfrefactor/rambda)
![Normal size](https://img.badgesize.io/selfrefactor/rambda/master/dist/rambda.js)
![Gzip size](https://img.badgesize.io/selfrefactor/rambda/master/dist/rambda.js?compression=gzip)

## Example use

\`\`\`javascript
import { compose, map, filter } from 'rambda'

const result = compose(
  map(x => x * 2),
  filter(x => x > 2)
)([1, 2, 3, 4])
// => [6, 8]
\`\`\`

You can test this example in <a href=\\"https://rambda.now.sh?const%20result%20%3D%20R.compose(%0A%20%20R.map(x%20%3D%3E%20x%20*%202)%2C%0A%20%20R.filter(x%20%3D%3E%20x%20%3E%202)%0A)(%5B1%2C%202%2C%203%2C%204%5D)%0A%0A%2F%2F%20%3D%3E%20%5B6%2C%208%5D\\">Rambda's REPL</a>

* [Install](#install)
* [Differences between Rambda and Ramda](#differences-between-rambda-and-ramda)
* [API](#api)
* [Changelog](#changelog)

## Rambda's advantages

- Tree-shaking

Currently **Rambda** is more tree-shakable than **Ramda**

- Speed

**Rambda** is generally more performant than \`Ramda\` as the [benchmarks](#benchmarks) can prove that.

- dot notation for \`R.path\` and \`R.paths\`

Standard usage of \`R.path\` is \`R.path(['a', 'b'], {a: {b: 1} })\`.

In **Rambda** you have the choice to use dot notation(which is arguably more readable):

\`\`\`
R.path('a.b', {a: {b: 1} })
\`\`\`

- comma notation for \`R.pick\` and \`R.omit\`

Similar to dot notation, but the separator is comma(\`,\`) instead of dot(\`.\`).

\`\`\`
R.pick('a,b', {a: 1 , b: 2, c: 3} })

// No space allowed between properties
\`\`\`

- Typescript included

Typescript definitions are included in the library, in comparison to **Ramda**, where you need to additionally install \`@types/ramda\`.


- More generic methods

\`Ramda\` has an overwhelming list of methods, as one could get lost putting all these methods in one's head. \`Rambda\` has smaller method counts and that could be seen as advantage.

<details>
<summary>
  Click to see the full list of Ramda methods not implemented in Rambda 
</summary>

- __
- addIndex
- ap
- aperture
- apply
- applyTo
- ascend
- binary
- bind
- call
- chain
- comparator
- composeK
- composeP
- composeWith
- construct
- constructN
- contains
- converge
- countBy
- curryN
- descend
- differenceWith
- dissocPath
- dropLastWhile
- dropRepeats
- dropRepeatsWith
- dropWhile
- empty
- eqBy
- eqProps
- evolve
- findLast
- findLastIndex
- forEachObjIndexed
- gt
- gte
- hasIn
- hasPath
- innerJoin
- insert
- insertAll
- into
- invert
- invertObj
- invoker
- juxt
- keysIn
- lift
- liftN
- lt
- lte
- mapAccum
- mapAccumRight
- mapObjIndexed
- memoizeWith
- mergeAll
- mergeDeepLeft
- mergeDeepRight
- mergeDeepWith
- mergeDeepWithKey
- mergeLeft
- mergeRight
- mergeWith
- mergeWithKey
- move
- nAry
- nthArg
- o
- objOf
- of
- once
- or
- otherwise
- pair
- partialRight
- partition
- pathEq
- pathSatisfies
- pickBy
- pipeK
- pipeP
- pipeWith
- project
- propSatisfies
- props
- reduceBy
- reduceRight
- reduceWhile
- reduced
- remove
- scan
- sequence
- sortWith
- splitAt
- splitWhen
- symmetricDifferenceWith
- takeLastWhile
- takeWhile
- andThen
- toPairsIn
- transduce
- traverse
- tryCatch
- unapply
- unary
- uncurryN
- unfold
- union
- unionWith
- uniqBy
- unless
- unnest
- until
- useWith
- valuesIn
- when
- where
- whereEq
- xprod
- zipWith
- thunkify
- default

</details>
  
## Install

- **yarn add rambda**

- For UMD usage either use \`./dist/rambda.umd.js\` or following CDN link:

\`\`\`
https://unpkg.com/rambda@CURRENT_VERSION/dist/rambda.umd.js
\`\`\`

## Differences between Rambda and Ramda

- Rambda's **type** detect async functions and unresolved \`Promises\`. The returned values are \`'Async'\` and \`'Promise'\`.

- Rambda's **type** handle \`NaN\` input, in which case it returns \`\\"NaN\\"\`.

- Rambda's **path** and **paths** accepts dot notation(\`'x.y' same as ['x','y']\`)

- Rambda's **pick** and **omit** accept comma notation(\`'x,y' same as ['x','y']\`)

- Rambda's **map**, **filter**, **reject** and **forEach** can iterate over objects not only arrays.

- Rambda's **map** and **filter** pass array index as second argument when mapping over arrays.

- Rambda's **defaultTo** accept indefinite number of arguments when non curried, i.e. \`R.defaultTo(2, foo, bar, baz)\`.

- Rambda's **adjust**, **all**, **allPass**, **any**, **anyPass**, **findIndex** , **findLastIndex** and **reject** are passing index as second argument to the predicate function.

- Rambda's **startsWith/endsWith** work only with strings, instead with array and strings.

- Rambda's **equals** doesn't protect against circular structures as **Ramda.equals** does.

- Rambda's **flip** works only for functions expecting two arguments.

- Rambda's **partial** doesn't need the input arguments to be wrapped as array.

- Rambda's **filter** returns empty array with bad input(\`null\` or \`undefined\`), while Ramda throws.

- Ramda's **includes** will throw an error if input is neither \`string\` nor \`array\`, while **Rambda** version will return \`false\`.

- Ramda's **clamp** work for letters, while Rambda's method work only for numbers.

> If you need more **Ramda** methods in **Rambda**, you may either submit a \`PR\` or check the extended version of **Rambda** - [Rambdax](https://github.com/selfrefactor/rambdax). In case of the former, you may want to consult with [Rambda contribution guidelines.](CONTRIBUTING.md)

## Benchmarks

<details>

<summary>
Click to expand all benchmark results

There are methods which are benchmarked only with \`Ramda\` and \`Rambda\`(i.e. no \`Lodash\`).

Note that some of these methods, are called with and without curring. This is done in order to give more detailed performance feedback.

</summary>

method | Rambda | Ramda | Lodash
--- |--- | --- | ---
 *add* | ğŸš€ Fastest | 28.16% slower | 76.17% slower
 *adjust* | ğŸš€ Fastest | 2.8% slower | ğŸ”³
 *all* | ğŸš€ Fastest | 89.64% slower | ğŸ”³
 *allPass* | ğŸš€ Fastest | 98.48% slower | ğŸ”³
 *any* | ğŸš€ Fastest | 92.1% slower | 29.4% slower
 *anyPass* | ğŸš€ Fastest | 98.67% slower | ğŸ”³
 *append* | ğŸš€ Fastest | 85.14% slower | ğŸ”³
 *applySpec* | ğŸš€ Fastest | 82.9% slower | ğŸ”³
 *assoc* | 76.71% slower | 63.5% slower | ğŸš€ Fastest
 *clone* | ğŸš€ Fastest | 93.55% slower | 88.95% slower
 *compose* | ğŸš€ Fastest | 95.09% slower | 79.91% slower
 *converge* | 72.48% slower | ğŸš€ Fastest | ğŸ”³
 *curry* | ğŸš€ Fastest | 42.95% slower | ğŸ”³
 *curryN* | ğŸš€ Fastest | 22.07% slower | ğŸ”³
 *defaultTo* | ğŸš€ Fastest | 41.61% slower | ğŸ”³
 *drop* | ğŸš€ Fastest | 89.2% slower | ğŸ”³
 *dropLast* | ğŸš€ Fastest | 91.53% slower | ğŸ”³
 *equals* | ğŸš€ Fastest | 84.87% slower | 59.82% slower
 *filter* | ğŸš€ Fastest | 72.63% slower | 11.78% slower
 *find* | ğŸš€ Fastest | 47.89% slower | 60.19% slower
 *findIndex* | ğŸš€ Fastest | 90.6% slower | 84.75% slower
 *flatten* | 10.31% slower | 96.42% slower | ğŸš€ Fastest
 *ifElse* | ğŸš€ Fastest | 23.16% slower | ğŸ”³
 *includes* | ğŸš€ Fastest | 66.8% slower | ğŸ”³
 *indexOf* | ğŸš€ Fastest | 69.38% slower | 0.64% slower
 *init* | ğŸš€ Fastest | 94.17% slower | 2.63% slower
 *is* | ğŸš€ Fastest | 44.05% slower | ğŸ”³
 *isEmpty* | 37.68% slower | 92.85% slower | ğŸš€ Fastest
 *last* | ğŸš€ Fastest | 99.02% slower | 3.5% slower
 *lastIndexOf* | ğŸš€ Fastest | 45.56% slower | ğŸ”³
 *map* | ğŸš€ Fastest | 87.72% slower | 23.59% slower
 *match* | ğŸš€ Fastest | 52.01% slower | ğŸ”³
 *merge* | ğŸš€ Fastest | 29.34% slower | 67.66% slower
 *none* | ğŸš€ Fastest | 66.57% slower | ğŸ”³
 *omit* | ğŸš€ Fastest | 72.93% slower | 97.97% slower
 *over* | ğŸš€ Fastest | 56.26% slower | ğŸ”³
 *path* | 0.34% slower | 52.76% slower | ğŸš€ Fastest
 *pick* | ğŸš€ Fastest | 24.06% slower | 88.13% slower
 *prop* | ğŸš€ Fastest | 94.38% slower | ğŸ”³
 *propEq* | ğŸš€ Fastest | 90.34% slower | ğŸ”³
 *range* | ğŸš€ Fastest | 63.45% slower | 50.56% slower
 *reduce* | 71.84% slower | 84.24% slower | ğŸš€ Fastest
 *repeat* | 55.51% slower | 83.45% slower | ğŸš€ Fastest
 *replace* | ğŸš€ Fastest | 35.85% slower | 4.98% slower
 *set* | ğŸš€ Fastest | 57.61% slower | ğŸ”³
 *sort* | ğŸš€ Fastest | 28.43% slower | ğŸ”³
 *sortBy* | ğŸš€ Fastest | 16.52% slower | 72.48% slower
 *split* | ğŸš€ Fastest | 56.27% slower | 28.78% slower
 *splitEvery* | ğŸš€ Fastest | 74.75% slower | ğŸ”³
 *take* | ğŸš€ Fastest | 96% slower | 26.07% slower
 *takeLast* | ğŸš€ Fastest | 96.37% slower | 28.53% slower
 *test* | ğŸš€ Fastest | 86.86% slower | ğŸ”³
 *type* | 19.76% slower | ğŸš€ Fastest | ğŸ”³
 *uniq* | 99.56% slower | 96.54% slower | ğŸš€ Fastest
 *update* | ğŸš€ Fastest | 87.94% slower | ğŸ”³
 *view* | ğŸš€ Fastest | 69.35% slower | ğŸ”³

</details>

## Used by

- [WatermelonDB](https://github.com/Nozbe/WatermelonDB)

- [SAP's Cloud SDK](https://github.com/SAP/cloud-sdk)

- [VSCode Slack intergration](https://github.com/verydanny/vcslack)

- [Webpack PostCSS](https://github.com/sectsect/webpack-postcss)

- [MobX-State-Tree decorators](https://github.com/farwayer/mst-decorators)

- [Mobx decorators](https://github.com/farwayer/mobx-decorators)
"
`;
