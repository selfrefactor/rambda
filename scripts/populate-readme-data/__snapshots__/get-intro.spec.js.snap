// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`happy 1`] = `
"
# Rambda

\`Rambda\` is faster and smaller alternative to the popular functional programming library **Ramda**. - [Documentation](https://selfrefactor.github.io/rambda/#/)

[![CircleCI](https://circleci.com/gh/selfrefactor/rambda/tree/master.svg?style=svg)](https://circleci.com/gh/selfrefactor/rambda/tree/master)
[![codecov](https://codecov.io/gh/selfrefactor/rambda/branch/master/graph/badge.svg)](https://codecov.io/gh/selfrefactor/rambda)
[![dependencies Status](https://david-dm.org/selfrefactor/rambda/status.svg)](https://david-dm.org/selfrefactor/rambda)
![Normal size](https://img.badgesize.io/selfrefactor/rambda/master/dist/rambda.js)
![Gzip size](https://img.badgesize.io/selfrefactor/rambda/master/dist/rambda.js?compression=gzip)

## Example use

\`\`\`javascript
import { compose, map, filter } from 'rambda'

const result = compose(
  map(x => x * 2),
  filter(x => x > 2)
)([1, 2, 3, 4])
// => [6, 8]
\`\`\`

You can test this example in <a href=\\"https://rambda.now.sh?const%20result%20%3D%20R.compose(%0A%20%20R.map(x%20%3D%3E%20x%20*%202)%2C%0A%20%20R.filter(x%20%3D%3E%20x%20%3E%202)%0A)(%5B1%2C%202%2C%203%2C%204%5D)%0A%0A%2F%2F%20%3D%3E%20%5B6%2C%208%5D\\">Rambda's REPL</a>

* [Install](#install)
* [Differences between Rambda and Ramda](#differences-between-rambda-and-ramda)
* [API](#api)
* [Changelog](#changelog)

## Rambda's advantages

- Tree-shaking

Currently **Rambda** is more tree-shakable than **Ramda**

- Speed

**Rambda** is generally more performant than \`Ramda\` as the [benchmarks](#benchmarks) can prove that.

- dot notation for \`R.path\` and \`R.paths\`

Standard usage of \`R.path\` is \`R.path(['a', 'b'], {a: {b: 1} })\`.

In **Rambda** you have the choice to use dot notation(which is arguably more readable):

\`\`\`
R.path('a.b', {a: {b: 1} })
\`\`\`

- comma notation for \`R.pick\` and \`R.omit\`

Similar to dot notation, but the separator is comma(\`,\`) instead of dot(\`.\`).

\`\`\`
R.pick('a,b', {a: 1 , b: 2, c: 3} })

// No space allowed between properties
\`\`\`

- Typescript included

Typescript definitions are included in the library, in comparison to **Ramda**, where you need to additionally install \`@types/ramda\`.

Still, you need to be aware that due to [variadic arguments Typescript proposal](https://github.com/microsoft/TypeScript/issues/5453) being still open and unresolved, using **R.compose/R.pipe** is far from smooth. The issue has been [previously discussed](https://github.com/selfrefactor/rambda/issues/466) but there is no visible solution to it.


- More generic methods

\`Ramda\` has an overwhelming list of methods, as one could get lost putting all these methods in one's head. \`Rambda\` has smaller method counts and that could be seen as advantage.

<details>
<summary>
  Click to see the full list of 116 Ramda methods not implemented in Rambda 
</summary>

- __
- addIndex
- ap
- aperture
- apply
- applyTo
- ascend
- binary
- bind
- call
- comparator
- composeK
- composeP
- composeWith
- construct
- constructN
- contains
- countBy
- descend
- differenceWith
- dissocPath
- dropLastWhile
- dropRepeats
- dropRepeatsWith
- dropWhile
- empty
- eqBy
- eqProps
- evolve
- forEachObjIndexed
- gt
- gte
- hasIn
- innerJoin
- insert
- insertAll
- into
- invert
- invertObj
- invoker
- juxt
- keysIn
- lift
- liftN
- lt
- lte
- mapAccum
- mapAccumRight
- mapObjIndexed
- memoizeWith
- mergeAll
- mergeDeepLeft
- mergeDeepRight
- mergeDeepWith
- mergeDeepWithKey
- mergeLeft
- mergeRight
- mergeWith
- mergeWithKey
- move
- nAry
- nthArg
- o
- objOf
- of
- once
- or
- otherwise
- pair
- partialRight
- partition
- pathEq
- pathSatisfies
- pickBy
- pipeK
- pipeP
- pipeWith
- project
- propSatisfies
- props
- reduceBy
- reduceRight
- reduceWhile
- reduced
- remove
- scan
- sequence
- sortWith
- splitAt
- splitWhen
- symmetricDifferenceWith
- takeLastWhile
- takeWhile
- andThen
- toPairsIn
- transduce
- traverse
- tryCatch
- unapply
- unary
- uncurryN
- unfold
- union
- unionWith
- uniqBy
- unless
- unnest
- until
- useWith
- valuesIn
- where
- whereEq
- xprod
- zipWith
- thunkify
- default

</details>
  
## Install

- **yarn add rambda**

- For UMD usage either use \`./dist/rambda.umd.js\` or the following CDN link:

\`\`\`
https://unpkg.com/rambda@CURRENT_VERSION/dist/rambda.umd.js
\`\`\`

- with deno

\`\`\`
import {compose, add} from 'https://raw.githubusercontent.com/selfrefactor/rambda/master/dist/rambda.esm.js'
\`\`\`

## Differences between Rambda and Ramda

- Rambda's **type** detects async functions and unresolved \`Promises\`. The returned values are \`'Async'\` and \`'Promise'\`.

- Rambda's **type** handles *NaN* input, in which case it returns \`NaN\`.

- Rambda's **path** and **paths** accept dot notation - \`'x.y' same as ['x','y']\`

- Rambda's **pick** and **omit** accept comma notation - \`'x,y' same as ['x','y']\`

- Rambda's **map**, **reject** and **forEach** can iterate over objects not only arrays.

- Rambda's **map** and **filter** pass array index as second argument when mapping over arrays.

- Rambda's **adjust**, **all**, **allPass**, **any**, **anyPass**, **findIndex** , **findLastIndex** and **reject** are passing index as second argument to the predicate function.

- Rambda's **filter** returns empty array with bad input(\`null\` or \`undefined\`), while Ramda throws.

- Ramda's **includes** will throw an error if input is neither \`string\` nor \`array\`, while **Rambda** version will return \`false\`.

- Ramda's **clamp** work for letters, while Rambda's method work only for numbers.

> If you need more **Ramda** methods in **Rambda**, you may either submit a \`PR\` or check the extended version of **Rambda** - [Rambdax](https://github.com/selfrefactor/rambdax). In case of the former, you may want to consult with [Rambda contribution guidelines.](CONTRIBUTING.md)

## Benchmarks

<details>

<summary>
Click to expand all benchmark results

There are methods which are benchmarked only with \`Ramda\` and \`Rambda\`(i.e. no \`Lodash\`).

Note that some of these methods, are called with and without curring. This is done in order to give more detailed performance feedback.

The benchmarks results are produced from latest versions of *Rambda*, *Lodash*(4.17.15) and *Ramda*(0.27.0).

</summary>

method | Rambda | Ramda | Lodash
--- |--- | --- | ---
 *add* | 96.29% slower | 96.37% slower | ğŸ”³
 *adjust* | 62.03% slower | ğŸš€ Fastest | ğŸ”³
 *all* | ğŸš€ Fastest | 94.17% slower | ğŸ”³
 *allPass* | ğŸš€ Fastest | 99.04% slower | ğŸ”³
 *any* | ğŸš€ Fastest | 98.24% slower | ğŸ”³
 *anyPass* | ğŸš€ Fastest | 99.18% slower | ğŸ”³
 *append* | ğŸš€ Fastest | 81.35% slower | ğŸ”³
 *applySpec* | ğŸš€ Fastest | 72.7% slower | ğŸ”³
 *assoc* | 91.44% slower | 58.77% slower | ğŸ”³
 *clone* | ğŸš€ Fastest | 83.88% slower | ğŸ”³
 *compose* | ğŸš€ Fastest | 96.09% slower | ğŸ”³
 *converge* | 37.4% slower | ğŸš€ Fastest | ğŸ”³
 *curry* | 53.49% slower | ğŸš€ Fastest | ğŸ”³
 *curryN* | 61.91% slower | ğŸš€ Fastest | ğŸ”³
 *defaultTo* | ğŸš€ Fastest | 59.37% slower | ğŸ”³
 *drop* | ğŸš€ Fastest | 97.38% slower | ğŸ”³
 *dropLast* | ğŸš€ Fastest | 96.82% slower | ğŸ”³
 *equals* | 77.01% slower | 79.54% slower | ğŸ”³
 *filter* | 71.08% slower | 88.05% slower | ğŸ”³
 *find* | ğŸš€ Fastest | 91.09% slower | ğŸ”³
 *findIndex* | ğŸš€ Fastest | 97.99% slower | ğŸ”³
 *flatten* | 96.44% slower | 95.22% slower | ğŸ”³
 *ifElse* | ğŸš€ Fastest | 20.75% slower | ğŸ”³
 *includes* | ğŸš€ Fastest | 69.26% slower | ğŸ”³
 *indexOf* | 5% slower | 84.76% slower | ğŸ”³
 *init* | 93.98% slower | 96.93% slower | ğŸ”³
 *is* | ğŸš€ Fastest | 14.62% slower | ğŸ”³
 *isEmpty* | 62.95% slower | 93.54% slower | ğŸ”³
 *last* | ğŸš€ Fastest | 99.63% slower | ğŸ”³
 *lastIndexOf* | ğŸš€ Fastest | 41.81% slower | ğŸ”³
 *map* | 34.86% slower | 66.26% slower | ğŸ”³
 *match* | ğŸš€ Fastest | 44.35% slower | ğŸ”³
 *merge* | 62.84% slower | ğŸš€ Fastest | ğŸ”³
 *none* | ğŸš€ Fastest | 88.37% slower | ğŸ”³
 *omit* | ğŸš€ Fastest | 72.52% slower | ğŸ”³
 *over* | ğŸš€ Fastest | 40.27% slower | ğŸ”³
 *path* | 6.27% slower | 75.23% slower | ğŸ”³
 *pick* | ğŸš€ Fastest | 23.34% slower | ğŸ”³
 *prop* | ğŸš€ Fastest | 89.4% slower | ğŸ”³
 *propEq* | ğŸš€ Fastest | 85.12% slower | ğŸ”³
 *range* | 95.65% slower | 91.05% slower | ğŸ”³
 *reduce* | 79.04% slower | 72.44% slower | ğŸ”³
 *repeat* | 82.97% slower | 94.94% slower | ğŸ”³
 *replace* | 3.62% slower | 34.6% slower | ğŸ”³
 *set* | ğŸš€ Fastest | 24.15% slower | ğŸ”³
 *sort* | ğŸš€ Fastest | 62.87% slower | ğŸ”³
 *sortBy* | ğŸš€ Fastest | 60.94% slower | ğŸ”³
 *split* | ğŸš€ Fastest | 85.94% slower | ğŸ”³
 *splitEvery* | ğŸš€ Fastest | 87.31% slower | ğŸ”³
 *take* | 91.55% slower | 97.55% slower | ğŸ”³
 *takeLast* | 92.62% slower | 98.8% slower | ğŸ”³
 *test* | ğŸš€ Fastest | 94.14% slower | ğŸ”³
 *type* | 36.31% slower | ğŸš€ Fastest | ğŸ”³
 *uniq* | 99.13% slower | 96.88% slower | ğŸ”³
 *update* | 40.2% slower | ğŸš€ Fastest | ğŸ”³
 *view* | ğŸš€ Fastest | 57.13% slower | ğŸ”³

</details>

## Used by

- [WatermelonDB](https://github.com/Nozbe/WatermelonDB)

- [SAP's Cloud SDK](https://github.com/SAP/cloud-sdk)

- [VSCode Slack intergration](https://github.com/verydanny/vcslack)

- [Webpack PostCSS](https://github.com/sectsect/webpack-postcss)

- [MobX-State-Tree decorators](https://github.com/farwayer/mst-decorators)

- [Mobx decorators](https://github.com/farwayer/mobx-decorators)
"
`;
